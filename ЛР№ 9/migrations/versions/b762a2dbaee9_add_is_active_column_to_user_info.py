"""Add is_active column to user_info

Revision ID: b762a2dbaee9
Revises: 
Create Date: 2024-12-17 14:00:08.890593

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b762a2dbaee9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_info.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('tag_rating')
    op.drop_table('user')
    op.drop_table('otp_keys')
    op.drop_table('confirmed_emails')
    op.drop_table('users')
    op.drop_table('tag')
    op.drop_table('movie_tags')
    op.drop_table('user_tokens')
    op.drop_table('movie')
    op.drop_table('user_preferences')
    op.drop_table('goose_db_version')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('goose_db_version',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('version_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('is_applied', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('tstamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='goose_db_version_pkey')
    )
    op.create_table('user_preferences',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='user_preferences_tag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id', name='user_preferences_pkey')
    )
    op.create_table('movie',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('year >= 1800 AND year::numeric <= EXTRACT(year FROM CURRENT_DATE)', name='movie_year_check'),
    sa.PrimaryKeyConstraint('id', name='movie_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_tokens',
    sa.Column('device_id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_tokens_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('device_id', name='user_tokens_pkey')
    )
    op.create_table('movie_tags',
    sa.Column('movie_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['movie_id'], ['movie.id'], name='movie_tags_movie_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='movie_tags_tag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movie_id', 'tag_id', name='movie_tags_pkey')
    )
    op.create_table('tag',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tag_pkey'),
    sa.UniqueConstraint('name', name='tag_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('email_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['email_id'], ['confirmed_emails.id'], name='fk_email', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email_id', name='users_email_id_key'),
    sa.UniqueConstraint('name', name='users_name_key')
    )
    op.create_table('confirmed_emails',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='confirmed_emails_pkey'),
    sa.UniqueConstraint('email', name='confirmed_emails_email_key')
    )
    op.create_table('otp_keys',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('otp_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='otp_keys_pkey'),
    sa.UniqueConstraint('email', name='otp_keys_email_key')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('passhash', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('spendings', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('level_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('username', name='user_username_key')
    )
    op.create_table('tag_rating',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='tag_rating_tag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id', name='tag_rating_pkey')
    )
    op.drop_table('transactions')
    # ### end Alembic commands ###
